<project name="buildTasks" default="" >
	<!-- 
	Used to compile tests needs 2 properties:
		1. dist - the target to compile to.
		2. compileSrc - the source directory.
		3. classpath - class path.
		4. lib.dir - jars directory.
		5. resources.dir - project resources directory
	-->
	<target name="compile">
		<tstamp/>
		
		<!-- Compile the code and create javadoc -->
		<javac
			srcdir="${compileSrc}"
			destdir="${dist}"
			debug="on"
			includes="${include}"
			failonerror="false"
			classpath="${classpath}"
		/>
        <!--copy todir="${dist}">
            <fileset dir="${compileSrc}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy-->
	</target>
	<!--
		Used to build regression distribution.
		Following are the script parameters:
		1. export.src - if set will run the export of the tests sources.
		2.export.resources - export resources directory
		3. export.classes - export tests classes.
		4. export.so - export system objects.
		5. export.runner - export the runner.
		6. out.dir - the out dir used to build the delivery.
		7. src.dir - the tests sources directory.
		8. class.dir - the classes directory.
		9. zip.file - the target zip file.		
	-->
	<target name="export_src" >
		<copy todir="${out.dir}/project/tests">
			<fileset dir="${src.dir}" excludes="${exclude.directories}"/>
		</copy>
	</target>
	<target name="export_resources" if="export.resources">
		<copy todir="${out.dir}/project/resources">
			<fileset dir="${resources.dir}"/>
		</copy>
	</target>
	<target name="export_classes" if="export.classes">
		<copy todir="${out.dir}/project/classes">
            <fileset dir="${classes.dir}" excludes="${exclude.directories}"/>
		</copy>
	</target>
	<target name="export_lib" if="export.lib">
		<copy todir="${out.dir}/project/lib" failonerror="false">
            <fileset dir="${lib.dir}"/>
		</copy>
	</target>
	<!-- The following files will be copied when the export 
	runner option is checked -->
	<target name="export_runner" if="export.runner">
		<copy todir="${out.dir}" failonerror="false">
            <fileset file="${runner.dir}/runScenario.bat"/>
            <fileset file="${runner.dir}/runScenario.sh"/>
            <fileset file="${runner.dir}/runAgent.bat"/>
            <fileset file="${runner.dir}/runAgent"/>			
            <fileset file="${runner.dir}/run.bat"/>
            <fileset file="${runner.dir}/run"/>
			<fileset file="${runner.dir}/runBase.bat"/>
			<fileset file="${runner.dir}/runBase"/>
            <fileset file="${runner.dir}/.jsystembase"/>
            <fileset file="${runner.dir}/jsystem.properties"/>
            <fileset file="${runner.dir}/customer.bat"/>
            <fileset file="${runner.dir}/db.properties"/>
			<fileset file="${runner.dir}/splash.jpg"/>
		</copy>
		<propertyfile file="${out.dir}/jsystem.properties">
		  <entry  key="tests.src" value="project/tests"/>
		  <entry  key="tests.dir" value="project/classes"/>
		</propertyfile>
		<mkdir dir="${out.dir}/lib"/>
		<copy todir="${out.dir}/lib" failonerror="false">
            <fileset dir="${runner.dir}/lib"/>
 		</copy>
		<copy todir="${out.dir}/customer_lib" failonerror="false">
            <fileset dir="${runner.dir}/customer_lib"/>
 		</copy>
		<copy todir="${out.dir}/thirdparty" failonerror="false">
            <fileset dir="${runner.dir}/thirdparty"/>
 		</copy> 		
	</target>
	<target name="export_jdk" if="export.jdk">
		<copy todir="${out.dir}/thirdparty/jdk" failonerror="false">
            <fileset dir="${jdk.dir}"/>
		</copy>
	</target>
	<target name="export_log" if="export.log">
		<echo>in export log</echo>
		<mkdir dir="${out.dir}/internalLog"/>
		<copy todir="${out.dir}/internalLog" failonerror="false">
            <fileset dir="${runner.dir}" includes="*.log"/>
            <fileset dir="${runner.dir}" includes="*.properties"/>
		</copy>
	</target>	

	<target name="export" depends="export_src,export_resources,export_classes,export_lib,export_runner,export_jdk,export_log">
		<zip destfile="${zip.file}"
		       basedir="${out.dir}"
		  />
		<delete dir="${out.dir}"/>
	</target>
	
	
	
	<target name="delete_prior">
		<echo>Base dir = ${base.dir}</echo>
		<echo>Classes dir = ${out.dir}</echo>
		<echo>tests dir = ${src.dir}</echo>
		<delete includeemptydirs="true">
			<fileset dir="${base.dir}">
				<include name="lib/*/**" if="delete.lib"/>
			</fileset>
			<fileset dir="${out.dir}">
			    <include name="*/**" if="delete.tests"/>
				<exclude name="sut/*/**" unless="delete.suts"/>
				<exclude name="scenarios/*/**" unless="delete.scenarios"/>
				
				<include name="sut/*/**" if="delete.suts"/>
				<include name="scenarios/*/**" if="delete.scenarios"/>
			</fileset>	
			<fileset dir="${src.dir}">
				<include name="*/**" if="delete.tests"/>
				<exclude name="sut/*/**" unless="delete.suts"/>
				<exclude name="scenarios/*/**" unless="delete.scenarios"/>
				
				<include name="sut/*/**" if="delete.suts"/>
				<include name="scenarios/*/**" if="delete.scenarios"/>
			</fileset>
		</delete>
	</target>	
	
	<target name="import_lib" if="import.lib">
		<unzip src="${zip.file}" dest="${base.dir}">
			<patternset>						    
				<include name="*/lib/**" if="import.lib"/>
			</patternset>
			
			<globmapper from="project/*" to="*"/>
		</unzip>
	</target>	
	
	<target name="import_src">
		<unzip src="${zip.file}" dest="${src.dir}">
			<patternset>
				<!-- sources -->
				<include name="*/tests/**" if="import.tests"/>
				<exclude name="*/tests/sut/**" unless="import.suts"/>
				<exclude name="*/tests/scenarios/**" unless="import.scenarios"/>
				
				<include name="*/tests/sut/**" if="import.suts"/>
				<include name="*/tests/scenarios/**" if="import.scenarios"/>
			</patternset>
			
			<globmapper from="project/tests/*" to="*"/>
		</unzip>
	</target>	
	
	<target name="import_classes">
		<unzip src="${zip.file}" dest="${out.dir}">
			<patternset>
				<!-- classes -->
				<include name="*/classes/**" if="import.tests"/>
				<exclude name="*/classes/sut/**" unless="import.suts"/>
				<exclude name="*/classes/scenarios/**" unless="import.scenarios"/>
				
				<include name="*/classes/sut/**" if="import.suts"/>
				<include name="*/classes/scenarios/**" if="import.scenarios"/>
			</patternset>
			<globmapper from="project/classes/*" to="*"/>

		</unzip>
	</target>	
	
	<target name="import" depends="delete_prior,import_lib,import_src,import_classes"/>
	
	<target name="test">
		<echo>Hello World ${out.dir}</echo>
	</target>
	<!--includes="mypackage/p1/**,mypackage/p2/**"-->
</project>
